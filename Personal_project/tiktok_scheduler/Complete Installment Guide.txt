# Complete Installation Guide for TikTok Scheduler

This guide provides step-by-step instructions for setting up the TikTok Scheduler application from scratch on a new machine.

## Prerequisites

- Git
- Python 3.8 or higher
- Node.js 14.x or higher and npm
- Access to TikTok Developer Portal for API credentials

## Step 1: Clone the Repository

```bash
# Create a project directory
mkdir tiktok_scheduler
cd tiktok_scheduler

# Initialize git repository (or clone if you have one)
git init
```

## Step 2: Set Up Python Backend

### Create Python Virtual Environment

```bash
# Create and activate virtual environment
python -m venv venv

# On Windows
venv\Scripts\activate

# On macOS/Linux
source venv/bin/activate
```

### Install Python Dependencies

```bash
# Create requirements.txt if it doesn't exist
pip install Flask==2.3.3 Flask-Cors==4.0.0 Flask-SQLAlchemy==3.1.1 Flask-JWT-Extended==4.5.3 SQLAlchemy==2.0.20 cryptography==41.0.4 python-dotenv==1.0.0 requests==2.31.0 APScheduler==3.10.4 gunicorn==21.2.0 bcrypt==4.0.1 pillow==10.0.1 pycryptodome==3.19.0 jsonschema==4.20.0

# Or if requirements.txt exists:
pip install -r requirements.txt
```

### Create Backend Directory Structure

```bash
# Create backend directory structure
mkdir -p backend/routes backend/models backend/services backend/utils
```

### Set Up Environment Variables

```bash
# Create .env file in the root directory
echo "SECRET_KEY=development_secret_key
JWT_SECRET_KEY=development_jwt_key
FLASK_ENV=development
DATABASE_URI=sqlite:///backend/tiktok_scheduler.db
TIKTOK_CLIENT_KEY=your_tiktok_client_key
TIKTOK_CLIENT_SECRET=your_tiktok_client_secret
TIKTOK_REDIRECT_URI=http://localhost:3000/auth/tiktok/callback
ENCRYPTION_MASTER_KEY=development_encryption_key" > .env
```

## Step 3: Set Up React Frontend

### Create Frontend Directory Structure

```bash
# Create frontend directory structure
mkdir -p frontend/public frontend/src/components frontend/src/services frontend/src/styles
```

### Initialize NPM and Install Dependencies

```bash
# Navigate to frontend directory
cd frontend

# Initialize package.json
npm init -y

# Install dependencies
npm install react react-dom react-scripts @mui/material @mui/icons-material @emotion/react @emotion/styled axios date-fns recharts crypto-js react-router-dom web-vitals

# Install development dependencies
npm install --save-dev @testing-library/jest-dom @testing-library/react @testing-library/user-event

# Create .env file for frontend
echo "REACT_APP_API_URL=http://localhost:5000/api" > .env

# Go back to project root
cd ..
```

### Update package.json Scripts

Edit `frontend/package.json` to include:

```json
"scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test",
  "eject": "react-scripts eject"
}
```

## Step 4: Create Required Directories

```bash
# Create uploads directory for videos
mkdir uploads

# Create directory for database
mkdir -p backend/instance
```

## Step 5: Initialize the Database

```bash
# Navigate to the backend directory
cd backend

# Run Python command to initialize the database
python -c "from app import app, db; from models import init_db; init_db(app)"

# Go back to project root
cd ..
```

## Step 6: Start the Application

### Start the Backend Server

```bash
# In one terminal (from project root, with virtual environment activated)
cd backend
python app.py
```

### Start the Frontend Development Server

```bash
# In another terminal (from project root)
cd frontend
npm start
```

The application should now be running:
- Backend API: http://localhost:5000
- Frontend: http://localhost:3000

## Step 7: Register Your TikTok Application

1. Go to the [TikTok Developer Portal](https://developers.tiktok.com/)
2. Register or sign in to your developer account
3. Create a new application with the required permissions:
   - User Info
   - Video Upload
   - Video Publish
4. Configure your application with the redirect URI: `http://localhost:3000/auth/tiktok/callback`
5. Get your Client Key and Client Secret
6. Update the `.env` file with your actual credentials

## Step 8: Test the Application

Run the test script to validate that everything is working correctly:

```bash
# From project root
python test_app.py
```

## Additional Setup for Production

For production deployment:

1. Generate secure keys for all environment variables
2. Set up a production database (PostgreSQL or MySQL recommended)
3. Configure a web server (Nginx or Apache) as a reverse proxy
4. Set up HTTPS with SSL certificates
5. Build the React frontend for production: `cd frontend && npm run build`
6. Run the backend with Gunicorn: `gunicorn -w 4 -b 127.0.0.1:5000 backend.app:app`

## Troubleshooting

### Backend Issues
- Check log messages in the terminal running the Flask application
- Verify that all Python modules are installed with `pip list`
- Ensure the database file exists and has the correct permissions

### Frontend Issues
- Check the browser console for JavaScript errors
- Verify that all npm packages are installed with `npm list`
- If getting API connection errors, make sure the backend server is running
- Clear the browser cache if needed